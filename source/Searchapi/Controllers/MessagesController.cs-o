using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Inkton.Nester;
using Inkton.Nester.Queue;
using Inkton.Nest.Cloud;
using Inkton.Nest.Model;
using Codesearch.Database;
using Codesearch.Model;

namespace Codesearch.Controllers
{
    /* 
        MessagesController is derived from ControllerBase 
        instead of Controller as there is no View invloved.
    */

    [Route("v1/[controller]")]
    [ApiController]
    public class MessagesController : ControllerBase
    {
        private readonly ILogger _logger;
        private readonly IMessageRepository _messageRepo;
        private readonly Runtime _runtime;

        public MessagesController(
            ILogger<MessagesController> logger,
            IMessageRepository messageRepo,
            Runtime runtime)
        {
            _logger = logger;
            _messageRepo = messageRepo;
            _runtime = runtime;
        }
        
        // GET api/messages
        [HttpGet]
        public IActionResult Get()
        { 
            try
            {
                return this.NestResultMultiple(
                    _messageRepo.ListAllMessages());
            }
            catch (System.Exception e)
            {
                return StatusCode(500, e);
            }
        }

        // GET api/messages/{id}
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            try
            {
                return this.NestResultSingle(
                    _messageRepo.GetMessage(id));
            }
            catch (System.Exception e)
            {
                return StatusCode(500, e);
            }
        }

        // POST api/messages
        [HttpPost]
        public async Task<IActionResult> CreateAsync([FromBody] Message message)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return StatusCode(422, ModelState);
                }

                Session session = await GetSessionAsync();

                string status = string.Format("Message received by {0} at {1}",  
                    _runtime.ComponentId, DateTime.Now.ToString("t"));

                _logger.LogInformation(status);

                message.SessionId = session.Id;
                message.Status = status;

                await _messageRepo.AddMessageAsync(message);

                _runtime.Send(message, _runtime.GetNest("github"), 
                    typeof(Message));

                return this.NestResultSingle(message);
            }
            catch (System.Exception e)
            {
                return StatusCode(500, e);
            }
        }

        // PUT api/messages/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateAsync(int id, string text)
        {
            try
            {
                Message existingMessage = _messageRepo.GetMessage(id);

                if (existingMessage == null)
                {
                    return BadRequest();
                }

                existingMessage.Text = text;

                if (await _messageRepo.UpdateMessageAsync(existingMessage))
                {
                    _logger.LogInformation("Message saved to database");
                     return this.NestResultSingle(existingMessage);
                }
                else
                {
                    return this.NestResult(-1, "Failed to save message");
                }
            }
            catch (System.Exception e)
            {
                return StatusCode(500, e);
            }
        }

        // DELETE api/messages/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAsync(int id)
        {
            try
            {
                Message existingMessage = _messageRepo.GetMessage(id);

                if (existingMessage == null)
                {
                    return BadRequest();
                }
 
                await _messageRepo.DeleteMessageAsync(existingMessage);
                _logger.LogInformation(existingMessage.Text + " removed from the database");

                return this.NestResultSingle(existingMessage);
            }
            catch (System.Exception e)
            {
                return StatusCode(500, e);
            }
        }

        private async Task<Session> GetSessionAsync()
        {
            Session session = new Session { 
                    User = "Anon", 
                    LoginTime = DateTime.Now
                    };

            await _messageRepo.AddSessionAsync(session);

            return session;
        }
    }
}
