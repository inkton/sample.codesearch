{"notes":null,"result_code":0,"result_text":"Success","data":{"SearchResult":{"Id":43,"SearchQueryId":22,"Service":"bitbucket","HandledBy":"bitbucket.0","Data":"{\"next\": \"https://api.bitbucket.org/2.0/teams/atlassianlabs/search/code?search_query=docker&page=2\", \"values\": [{\"content_matches\": [{\"lines\": [{\"line\": 1, \"segments\": [{\"text\": \"[[\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"]]\"}]}, {\"line\": 2, \"segments\": [{\"text\": \"=== Install Elasticsearch with \"}, {\"text\": \"Docker\", \"match\": true}]}, {\"line\": 3, \"segments\": []}, {\"line\": 4, \"segments\": [{\"text\": \"Elasticsearch is also available as a \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image.\"}]}, {\"line\": 5, \"segments\": [{\"text\": \"The image is built with {xpack}/index.html[X-Pack].\"}]}, {\"line\": 6, \"segments\": []}, {\"line\": 7, \"segments\": [{\"text\": \"==== Security note\"}]}, {\"line\": 8, \"segments\": []}, {\"line\": 9, \"segments\": [{\"text\": \"NOTE: {xpack}/index.html[X-Pack] is preinstalled in this image.\"}]}, {\"line\": 10, \"segments\": [{\"text\": \"Please take a few minutes to familiarize yourself with {xpack}/security-getting-started.html[X-Pack Security] and how to change default passwords. The default password for the `elastic` user is `changeme`.\"}]}, {\"line\": 11, \"segments\": []}, {\"line\": 12, \"segments\": [{\"text\": \"NOTE: X-Pack includes a trial license for 30 days. After that, you can obtain one of the https://www.elastic.co/subscriptions[available subscriptions] or {xpack}/security-settings.html[disable Security]. The Basic license is free and includes the https://www.elastic.co/products/x-pack/monitoring[Monitoring] extension.\"}]}, {\"line\": 13, \"segments\": []}, {\"line\": 14, \"segments\": [{\"text\": \"Obtaining Elasticsearch for \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" is as simple as issuing a +\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" pull+ command against the Elastic \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" registry.\"}]}, {\"line\": 15, \"segments\": []}, {\"line\": 16, \"segments\": [{\"text\": \"ifeval::[\\\"{release-state}\\\"==\\\"unreleased\\\"]\"}]}, {\"line\": 17, \"segments\": []}, {\"line\": 18, \"segments\": [{\"text\": \"WARNING: Version {version} of Elasticsearch has not yet been released, so no \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image is currently available for this version.\"}]}, {\"line\": 19, \"segments\": []}, {\"line\": 20, \"segments\": [{\"text\": \"endif::[]\"}]}, {\"line\": 21, \"segments\": []}, {\"line\": 22, \"segments\": [{\"text\": \"ifeval::[\\\"{release-state}\\\"!=\\\"unreleased\\\"]\"}]}, {\"line\": 23, \"segments\": []}, {\"line\": 24, \"segments\": [{\"text\": \"The \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image can be retrieved with the following command:\"}]}, {\"line\": 25, \"segments\": []}, {\"line\": 26, \"segments\": [{\"text\": \"[\\\"source\\\",\\\"sh\\\",subs=\\\"attributes\\\"]\"}]}, {\"line\": 27, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 28, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" pull {\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-image\"}]}]}, {\"lines\": [{\"line\": 32, \"segments\": []}, {\"line\": 33, \"segments\": [{\"text\": \"[[\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-cli-run]]\"}]}, {\"line\": 34, \"segments\": [{\"text\": \"==== Running Elasticsearch from the command line\"}]}, {\"line\": 35, \"segments\": []}, {\"line\": 36, \"segments\": [{\"text\": \"[[\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-cli-run-dev-mode]]\"}]}, {\"line\": 37, \"segments\": [{\"text\": \"===== Development mode\"}]}, {\"line\": 38, \"segments\": []}, {\"line\": 39, \"segments\": [{\"text\": \"ifeval::[\\\"{release-state}\\\"==\\\"unreleased\\\"]\"}]}, {\"line\": 40, \"segments\": []}, {\"line\": 41, \"segments\": [{\"text\": \"WARNING: Version {version} of the Elasticsearch \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image has not yet been released.\"}]}, {\"line\": 42, \"segments\": []}, {\"line\": 43, \"segments\": [{\"text\": \"endif::[]\"}]}, {\"line\": 44, \"segments\": []}, {\"line\": 45, \"segments\": [{\"text\": \"ifeval::[\\\"{release-state}\\\"!=\\\"unreleased\\\"]\"}]}, {\"line\": 46, \"segments\": []}, {\"line\": 47, \"segments\": [{\"text\": \"Elasticsearch can be quickly started for development or testing use with the following command:\"}]}, {\"line\": 48, \"segments\": []}, {\"line\": 49, \"segments\": [{\"text\": \"[\\\"source\\\",\\\"sh\\\",subs=\\\"attributes\\\"]\"}]}, {\"line\": 50, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 51, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" run -p 9200:9200 -e \\\"http.host=0.0.0.0\\\" -e \\\"transport.host=127.0.0.1\\\" {\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-image}\"}]}, {\"line\": 52, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 53, \"segments\": []}, {\"line\": 54, \"segments\": [{\"text\": \"endif::[]\"}]}, {\"line\": 55, \"segments\": []}, {\"line\": 56, \"segments\": [{\"text\": \"[[\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-cli-run-prod-mode]]\"}]}, {\"line\": 57, \"segments\": [{\"text\": \"===== Production mode\"}]}, {\"line\": 58, \"segments\": []}, {\"line\": 59, \"segments\": [{\"text\": \"[[\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-prod-prerequisites]]\"}]}, {\"line\": 60, \"segments\": [{\"text\": \"[IMPORTANT]\"}]}]}, {\"lines\": [{\"line\": 78, \"segments\": [{\"text\": \"://docs.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".com/engine/installation/mac/#/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-for-mac[\"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" for Mac]\"}]}, {\"line\": 79, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 80, \"segments\": [{\"text\": \"The `vm_max_map_count` setting must be set within the xhyve virtual machine:\"}]}, {\"line\": 81, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 82, \"segments\": [{\"text\": \"[\\\"source\\\",\\\"sh\\\"]\"}]}, {\"line\": 83, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 84, \"segments\": [{\"text\": \"$ screen ~/Library/Containers/com.\"}, {\"text\": \"docker.docker\", \"match\": true}, {\"text\": \"/Data/com.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".driver.amd64-linux/tty\"}]}, {\"line\": 85, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 86, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 87, \"segments\": [{\"text\": \"Log in with 'root' and no password.\"}]}, {\"line\": 88, \"segments\": [{\"text\": \"Then configure the `sysctl` setting as you would for Linux:\"}]}, {\"line\": 89, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 90, \"segments\": [{\"text\": \"[\\\"source\\\",\\\"sh\\\"]\"}]}, {\"line\": 91, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 92, \"segments\": [{\"text\": \"sysctl -w vm.max_map_count=262144\"}]}, {\"line\": 93, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 94, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 95, \"segments\": [{\"text\": \"* OSX with https://docs.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".com/engine/installation/mac/#\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-toolbox[\"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" Toolbox]\"}]}, {\"line\": 96, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 97, \"segments\": [{\"text\": \"The `vm_max_map_count` setting must be set via \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-machine:\"}]}, {\"line\": 98, \"segments\": [{\"text\": \"+\"}]}, {\"line\": 99, \"segments\": [{\"text\": \"[\\\"source\\\",\\\"sh\\\"]\"}]}, {\"line\": 100, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 101, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \"-machine ssh\"}]}, {\"line\": 102, \"segments\": [{\"text\": \"sudo sysctl -w vm.max_map_count=262144\"}]}, {\"line\": 103, \"segments\": [{\"text\": \"--------------------------------------------\"}]}, {\"line\": 104, \"segments\": [{\"text\": \"=========================\"}]}, {\"line\": 105, \"segments\": []}, {\"line\": 106, \"segments\": [{\"text\": \"The following example brings up a cluster comprising two Elasticsearch nodes.\"}]}, {\"line\": 107, \"segments\": [{\"text\": \"To bring up the cluster, use the <<\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-prod-cluster-composefile,`\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-compose.yml`>> and just type:\"}]}, {\"line\": 108, \"segments\": []}, {\"line\": 109, \"segments\": [{\"text\": \"ifeval::[\\\"{release-state}\\\"==\\\"unreleased\\\"]\"}]}, {\"line\": 110, \"segments\": []}, {\"line\": 111, \"segments\": [{\"text\": \"WARNING: Version {version} of the Elasticsearch \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image has not yet been released, so a `\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-compose.yml` is not\"}]}]}], \"path_matches\": [{\"text\": \"docs/reference/setup/install/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".asciidoc\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"docs/reference/setup/install/docker.asciidoc\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/elasticsearch/src/74acc594a9b40d29833accc4596bc92523ff6e3b/docs/reference/setup/install/docker.asciidoc\"}}}, \"content_match_count\": 31}, {\"content_matches\": [{\"lines\": [{\"line\": 2, \"segments\": []}, {\"line\": 3, \"segments\": [{\"text\": \"# This script saves a \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" image. It assumes that \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" image was build from this\"}]}, {\"line\": 4, \"segments\": [{\"text\": \"# commit using the build-production.bash script\"}]}, {\"line\": 5, \"segments\": []}, {\"line\": 6, \"segments\": [{\"text\": \"CURRENT_IMAGE_TAG=`git describe`\"}]}, {\"line\": 7, \"segments\": [{\"text\": \"IMAGE_TAG=${IMAGE_TAG:-$CURRENT_IMAGE_TAG}\"}]}, {\"line\": 8, \"segments\": [{\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_CMD=${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_CMD:-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"}\"}]}, {\"line\": 9, \"segments\": [{\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_SAVE_FILE=\\\"${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_SAVE_FILE:-my-reminders.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".save.tar}\\\"\"}]}, {\"line\": 10, \"segments\": [{\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_PROPERTIES_FILE=\\\"${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_PROPERTIES_FILE:-my-reminders.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".properties}\\\"\"}]}, {\"line\": 11, \"segments\": []}, {\"line\": 12, \"segments\": [{\"text\": \"${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_CMD} save -o \\\"$\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_SAVE_FILE\\\" \\\"$IMAGE_TAG\\\"\"}]}, {\"line\": 13, \"segments\": []}, {\"line\": 14, \"segments\": [{\"text\": \"cat > \\\"${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_PROPERTIES_FILE}\\\" <<PROPERTIES\"}]}, {\"line\": 15, \"segments\": [{\"text\": \"IMAGE_TAG=${IMAGE_TAG}\"}]}]}], \"path_matches\": [{\"text\": \"save-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-image.bash\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"save-docker-image.bash\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/my-reminders/src/2323596aaf051c5b2e6a3f9964f15fdc8088d5a6/save-docker-image.bash\"}}}, \"content_match_count\": 14}, {\"content_matches\": [{\"lines\": [{\"line\": 13, \"segments\": []}, {\"line\": 14, \"segments\": [{\"text\": \"describe('\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth', () => {\"}]}, {\"line\": 15, \"segments\": [{\"text\": \"    let \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth;\"}]}, {\"line\": 16, \"segments\": []}, {\"line\": 17, \"segments\": [{\"text\": \"    describe('basicAuth', () => {\"}]}, {\"line\": 18, \"segments\": [{\"text\": \"        let tmpDir;\"}]}, {\"line\": 19, \"segments\": [{\"text\": \"        let \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigDirPath;\"}]}, {\"line\": 20, \"segments\": [{\"text\": \"        let \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath;\"}]}, {\"line\": 21, \"segments\": []}, {\"line\": 22, \"segments\": [{\"text\": \"        beforeEach(willResolve(async () => {\"}]}, {\"line\": 23, \"segments\": []}, {\"line\": 24, \"segments\": [{\"text\": \"            // mock out requires and inject\"}]}, {\"line\": 25, \"segments\": [{\"text\": \"            const mockOs = jasmine.createSpyObj(['homedir']);\"}]}, {\"line\": 26, \"segments\": [{\"text\": \"            \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth = requireWithMocks('../../lib/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth', {\"}]}, {\"line\": 27, \"segments\": [{\"text\": \"                'os': mockOs\"}]}, {\"line\": 28, \"segments\": [{\"text\": \"            });\"}]}, {\"line\": 29, \"segments\": []}, {\"line\": 30, \"segments\": [{\"text\": \"            // create tmpDir containing .\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" subdirectory\"}]}, {\"line\": 31, \"segments\": [{\"text\": \"            tmpDir = await q.nfcall(fs.mkdtemp, '/tmp' + path.sep);\"}]}, {\"line\": 32, \"segments\": [{\"text\": \"            await q.nfcall(fs.mkdir, tmpDir + path.sep + '.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"');\"}]}, {\"line\": 33, \"segments\": [{\"text\": \"            \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigDirPath = tmpDir + path.sep + '.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"';\"}]}, {\"line\": 34, \"segments\": []}]}, {\"lines\": [{\"line\": 38, \"segments\": []}, {\"line\": 39, \"segments\": [{\"text\": \"            \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath = \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigDirPath + path.sep + 'config.json';\"}]}, {\"line\": 40, \"segments\": []}, {\"line\": 41, \"segments\": [{\"text\": \"        }));\"}]}, {\"line\": 42, \"segments\": []}, {\"line\": 43, \"segments\": [{\"text\": \"        describe('valid .\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json', () => {\"}]}, {\"line\": 44, \"segments\": []}, {\"line\": 45, \"segments\": [{\"text\": \"            beforeEach(willResolve(async () => {\"}]}, {\"line\": 46, \"segments\": []}, {\"line\": 47, \"segments\": [{\"text\": \"                // create valid config.json in \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigDir\"}]}, {\"line\": 48, \"segments\": [{\"text\": \"                await q.nfcall(fs.writeFile, \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath, JSON.stringify({\"}]}, {\"line\": 49, \"segments\": [{\"text\": \"                    auths: {\"}]}, {\"line\": 50, \"segments\": [{\"text\": \"                        validHost: {\"}]}, {\"line\": 51, \"segments\": [{\"text\": \"                            auth: 'validAuth'\"}]}, {\"line\": 52, \"segments\": [{\"text\": \"                        }\"}]}, {\"line\": 53, \"segments\": [{\"text\": \"                    }\"}]}, {\"line\": 54, \"segments\": [{\"text\": \"                }));\"}]}, {\"line\": 55, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 56, \"segments\": []}, {\"line\": 57, \"segments\": [{\"text\": \"            it('should return valid auth', willResolve(() => {\"}]}, {\"line\": 58, \"segments\": [{\"text\": \"                return \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.basicAuth('validHost')\"}]}, {\"line\": 59, \"segments\": [{\"text\": \"                    .then((basicAuth) => {\"}]}, {\"line\": 60, \"segments\": [{\"text\": \"                        expect(basicAuth).toEqual('validAuth');\"}]}, {\"line\": 61, \"segments\": [{\"text\": \"                    });\"}]}, {\"line\": 62, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 63, \"segments\": []}, {\"line\": 64, \"segments\": [{\"text\": \"            it('should thrown a FatalException on missing host', willResolve(() => {\"}]}, {\"line\": 65, \"segments\": [{\"text\": \"                return expectToReject(\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.basicAuth('wtfHost'))\"}]}, {\"line\": 66, \"segments\": [{\"text\": \"                    .then((err) => {\"}]}, {\"line\": 67, \"segments\": [{\"text\": \"                        expect(err instanceof FatalException).toBeTruthy('expected FatalException');\"}]}, {\"line\": 68, \"segments\": [{\"text\": \"                        expect(err.message).toEqual(`cannot find auth for wtfHost in auths in ${\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath}`);\"}]}, {\"line\": 69, \"segments\": [{\"text\": \"                        expect(err.rc).toEqual(15);\"}]}]}, {\"lines\": [{\"line\": 70, \"segments\": [{\"text\": \").toEqual('\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" login wtfHost');\"}]}, {\"line\": 71, \"segments\": [{\"text\": \"                    });\"}]}, {\"line\": 72, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 73, \"segments\": []}, {\"line\": 74, \"segments\": [{\"text\": \"            afterEach(willResolve(async () => {\"}]}, {\"line\": 75, \"segments\": []}, {\"line\": 76, \"segments\": [{\"text\": \"                // remove config.json\"}]}, {\"line\": 77, \"segments\": [{\"text\": \"                await q.nfcall(fs.unlink, \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath);\"}]}, {\"line\": 78, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 79, \"segments\": [{\"text\": \"        });\"}]}, {\"line\": 80, \"segments\": []}, {\"line\": 81, \"segments\": [{\"text\": \"        describe('missing .\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json', () => {\"}]}, {\"line\": 82, \"segments\": []}, {\"line\": 83, \"segments\": [{\"text\": \"            it('should throw a FatalException', willResolve(() => {\"}]}, {\"line\": 84, \"segments\": [{\"text\": \"                return expectToReject(\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.basicAuth('ohwow'))\"}]}, {\"line\": 85, \"segments\": [{\"text\": \"                    .then((err) => {\"}]}, {\"line\": 86, \"segments\": [{\"text\": \"                        expect(err instanceof FatalException).toBeTruthy('expected FatalException');\"}]}, {\"line\": 87, \"segments\": [{\"text\": \"                        expect(err.message).toEqual(`cannot find ${\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath}`);\"}]}, {\"line\": 88, \"segments\": [{\"text\": \"                        expect(err.rc).toEqual(13);\"}]}, {\"line\": 89, \"segments\": [{\"text\": \"                        expect(err.action).toEqual('\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" login ohwow');\"}]}, {\"line\": 90, \"segments\": [{\"text\": \"                    });\"}]}, {\"line\": 91, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 92, \"segments\": [{\"text\": \"        });\"}]}, {\"line\": 93, \"segments\": []}, {\"line\": 94, \"segments\": [{\"text\": \"        describe('invalid .\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json', () => {\"}]}, {\"line\": 95, \"segments\": []}, {\"line\": 96, \"segments\": [{\"text\": \"            beforeEach(willResolve(async () => {\"}]}, {\"line\": 97, \"segments\": []}, {\"line\": 98, \"segments\": [{\"text\": \"                // create dodgey config.json in \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigDir\"}]}, {\"line\": 99, \"segments\": [{\"text\": \"                await q.nfcall(fs.writeFile, \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"ConfigFilePath, 'omgwtf');\"}]}, {\"line\": 100, \"segments\": [{\"text\": \"            }));\"}]}, {\"line\": 101, \"segments\": []}, {\"line\": 102, \"segments\": [{\"text\": \"            it('should throw a FatalException', willResolve(() => {\"}]}, {\"line\": 103, \"segments\": [{\"text\": \"                return expectToReject(\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.basicAuth('bbq'))\"}]}, {\"line\": 104, \"segments\": [{\"text\": \"                    .then\"}]}]}], \"path_matches\": [{\"text\": \"spec/unit/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.spec.js\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"spec/unit/dockerAuth.spec.js\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/docker-browse/src/5719e742aefebd2e97789ef2d723252121ca449a/spec/unit/dockerAuth.spec.js\"}}}, \"content_match_count\": 28}, {\"content_matches\": [{\"lines\": [{\"line\": 9, \"segments\": []}, {\"line\": 10, \"segments\": [{\"text\": \"const ACTION_LOGIN_PREFIX = '\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" login ';\"}]}, {\"line\": 11, \"segments\": []}, {\"line\": 12, \"segments\": [{\"text\": \"/**\"}]}, {\"line\": 13, \"segments\": [{\"text\": \" * Read the basic 'auth' key for the host out of 'auths' from ~/.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json\"}]}, {\"line\": 14, \"segments\": [{\"text\": \" *\"}]}, {\"line\": 15, \"segments\": [{\"text\": \" * @param {string} host\"}]}, {\"line\": 16, \"segments\": [{\"text\": \" * @return {Promise.<string>}\"}]}, {\"line\": 17, \"segments\": [{\"text\": \" * @throws {FatalException} rc=13 ~/.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json missing\"}]}, {\"line\": 18, \"segments\": [{\"text\": \" * @throws {FatalException} rc=14 ~/.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"/config.json unreadable\"}]}, {\"line\": 19, \"segments\": [{\"text\": \" * @throws {FatalException} rc=15 auths.<host>.auth not present\"}]}, {\"line\": 20, \"segments\": [{\"text\": \" * @throws {FatalException} rc=16 \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" using OS X keychain to store credentials\"}]}, {\"line\": 21, \"segments\": [{\"text\": \" */\"}]}, {\"line\": 22, \"segments\": [{\"text\": \"function basicAuth(host) {\"}]}, {\"line\": 23, \"segments\": []}, {\"line\": 24, \"segments\": [{\"text\": \"    const configFilePath = path.join(os.homedir(), '.\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"', 'config.json');\"}]}, {\"line\": 25, \"segments\": []}, {\"line\": 26, \"segments\": [{\"text\": \"    return q.nfcall(fs.readFile, configFilePath)\"}]}, {\"line\": 27, \"segments\": [{\"text\": \"        .then((data) => {\"}]}, {\"line\": 28, \"segments\": [{\"text\": \"            const \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Config = JSON.parse(data);\"}]}, {\"line\": 29, \"segments\": [{\"text\": \"            if (\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Config['credsStore'] === 'osxkeychain') {\"}]}, {\"line\": 30, \"segments\": [{\"text\": \"                throw new FatalException(16, configFilePath + ' stores credentials in OS X keychain',\"}]}, {\"line\": 31, \"segments\": [{\"text\": \"                    'go to \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" preferences and untick \\\"Securely store \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" logins in macOS keychain\\\"');\"}]}, {\"line\": 32, \"segments\": [{\"text\": \"            }\"}]}, {\"line\": 33, \"segments\": [{\"text\": \"            return \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Config['auths'][host]['auth'];\"}]}, {\"line\": 34, \"segments\": [{\"text\": \"        })\"}]}]}], \"path_matches\": [{\"text\": \"lib/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"Auth.js\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"lib/dockerAuth.js\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/docker-browse/src/5719e742aefebd2e97789ef2d723252121ca449a/lib/dockerAuth.js\"}}}, \"content_match_count\": 11}, {\"content_matches\": [{\"lines\": [{\"line\": 18, \"segments\": []}, {\"line\": 19, \"segments\": [{\"text\": \"echo \\\"Building and deploying \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" images...\\\"\"}]}, {\"line\": 20, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" build -t \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".atlassian.io/sox/atlassian/jira-issue-updated-by:latest -t \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".atlassian.io/sox/atlassian/jira-issue-updated-by:$newversion .\"}]}, {\"line\": 21, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" push \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".atlassian.io/sox/atlassian/jira-issue-updated-by:latest\"}]}, {\"line\": 22, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" push \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".atlassian.io/sox/atlassian/jira-issue-updated-by:$newversion\"}]}, {\"line\": 23, \"segments\": []}]}], \"path_matches\": [{\"text\": \"ci/\"}, {\"text\": \"release-to-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".sh\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"ci/release-to-docker.sh\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/jira-issue-updated-by/src/3de374c3d12c60301fdff8389a88f6ea2cc19e27/ci/release-to-docker.sh\"}}}, \"content_match_count\": 8}, {\"content_matches\": [{\"lines\": [{\"line\": 2, \"segments\": []}, {\"line\": 3, \"segments\": [{\"text\": \"# Build and release the Revealer \"}, {\"text\": \"Docker\", \"match\": true}, {\"text\": \" image from Bitbucket Pipelines\"}]}, {\"line\": 4, \"segments\": []}, {\"line\": 5, \"segments\": [{\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_REGISTRY=\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-proxy.services.atlassian.com\"}]}, {\"line\": 6, \"segments\": []}, {\"line\": 7, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" login ${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_REGISTRY} -u ${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_USER} -p ${PIPELINES_JWT_TOKEN}\"}]}, {\"line\": 8, \"segments\": [{\"text\": \"./gradlew -PdockerRegistry=${\"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_REGISTRY} assemble release\"}, {\"text\": \"Docker\", \"match\": true}]}]}], \"path_matches\": [{\"text\": \"bin/\"}, {\"text\": \"pipelines-release-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".sh\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"bin/pipelines-release-docker.sh\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/revealer/src/3e1de0fa84262d1898d618a387b2ee4d88189458/bin/pipelines-release-docker.sh\"}}}, \"content_match_count\": 8}, {\"content_matches\": [{\"lines\": [{\"line\": 6, \"segments\": []}, {\"line\": 7, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" ps -q | xargs \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" stop\"}]}, {\"line\": 8, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" ps -aq | xargs \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" rm\"}]}, {\"line\": 9, \"segments\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \" images | grep none | col 3 | xargs \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \" rmi -f\"}]}]}], \"path_matches\": [{\"text\": \"scripts/\"}, {\"text\": \"reset-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".sh\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"scripts/reset-docker.sh\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/acamp-2016-ci-workshop/src/77877bd8d4b3fea9d3c478052b1d429e87977829/scripts/reset-docker.sh\"}}}, \"content_match_count\": 6}, {\"content_matches\": [{\"lines\": [{\"line\": 3, \"segments\": [{\"text\": \"var ORIGIN = 'bitbucket.org';\"}]}, {\"line\": 4, \"segments\": [{\"text\": \"var \"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_BUILDER_BASE = 'https://bcr-\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-builder.domain.dev.atlassian.io/push'\"}]}, {\"line\": 5, \"segments\": [{\"text\": \"// var \"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_BUILDER_BASE = 'https://hipchat-addon.ngrok.io/push'\"}]}, {\"line\": 6, \"segments\": []}, {\"line\": 7, \"segments\": [{\"text\": \"exports.push = function(repo, token, cb) {\"}]}, {\"line\": 8, \"segments\": [{\"text\": \"  var cloneUrl = 'https://x-token-auth:'+ token.access_token + '@bitbucket.org/'+ repo.full_name +'.git'\"}]}, {\"line\": 9, \"segments\": [{\"text\": \"  var repoNamespace = repo.full_name.split('/')[0]; \"}]}, {\"line\": 10, \"segments\": [{\"text\": \"  var data = {\"}]}, {\"line\": 11, \"segments\": [{\"text\": \"    author: repo.owner.username,\"}]}, {\"line\": 12, \"segments\": [{\"text\": \"    namespace: repoNamespace,\"}]}, {\"line\": 13, \"segments\": [{\"text\": \"    origin: ORIGIN,\"}]}, {\"line\": 14, \"segments\": [{\"text\": \"    repo: repo.name,\"}]}, {\"line\": 15, \"segments\": [{\"text\": \"    url: cloneUrl\"}]}, {\"line\": 16, \"segments\": [{\"text\": \"  };\"}]}, {\"line\": 17, \"segments\": [{\"text\": \"  console.log(data);\"}]}, {\"line\": 18, \"segments\": [{\"text\": \"  request.post({\"}]}, {\"line\": 19, \"segments\": [{\"text\": \"    uri: \"}, {\"text\": \"DOCKER\", \"match\": true}, {\"text\": \"_BUILDER_BASE,\"}]}, {\"line\": 20, \"segments\": [{\"text\": \"    json: data\"}]}]}], \"path_matches\": [{\"text\": \"lib/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-builder-client.js\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"lib/docker-builder-client.js\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/bcr-container-registry-addon/src/1e9b6b02b5c69301372baffbd9514ec96cff3532/lib/docker-builder-client.js\"}}}, \"content_match_count\": 4}, {\"content_matches\": [{\"lines\": [{\"line\": 3, \"segments\": [{\"text\": \"  web:\"}]}, {\"line\": 4, \"segments\": [{\"text\": \"    image: \"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \".atl-paas.net/evzijst/evzijst-prlinks:${VERSION}\"}]}, {\"line\": 5, \"segments\": [{\"text\": \"    ports:\"}]}, {\"line\": 6, \"segments\": [{\"text\": \"    - \\\"8080:8080\\\"\"}]}, {\"line\": 7, \"segments\": [{\"text\": \"    environment:\"}]}, {\"line\": 8, \"segments\": [{\"text\": \"      PG_PSQL_HOST: db\"}]}, {\"line\": 9, \"segments\": [{\"text\": \"      PG_PSQL_BOUNCER: db\"}]}, {\"line\": 10, \"segments\": [{\"text\": \"      PG_PSQL_PORT: 5432\"}]}, {\"line\": 11, \"segments\": [{\"text\": \"      PG_PSQL_SCHEMA: prlinks\"}]}, {\"line\": 12, \"segments\": [{\"text\": \"      PG_PSQL_ROLE: prlinks\"}]}, {\"line\": 13, \"segments\": [{\"text\": \"      PG_PSQL_PASSWORD: prlinks\"}]}, {\"line\": 14, \"segments\": [{\"text\": \"      PG_PSQL_URL: postgres://prlinks:prlinks@db:5432/prlinks\"}]}, {\"line\": 15, \"segments\": [{\"text\": \"      REDIS_MQ_HOST: redis\"}]}, {\"line\": 16, \"segments\": [{\"text\": \"#      DEBUG_ENABLED: 'true'\"}]}, {\"line\": 17, \"segments\": [{\"text\": \"      REMOTE_ADDR: ''\"}]}, {\"line\": 18, \"segments\": [{\"text\": \"      NGROK_TOKEN: ''\"}]}, {\"line\": 19, \"segments\": [{\"text\": \"    depends_on:\"}]}, {\"line\": 20, \"segments\": [{\"text\": \"    - db\"}]}, {\"line\": 21, \"segments\": [{\"text\": \"    - redis\"}]}, {\"line\": 22, \"segments\": []}, {\"line\": 23, \"segments\": [{\"text\": \"  redis:\"}]}, {\"line\": 24, \"segments\": [{\"text\": \"    image: \\\"redis:alpine\\\"\"}]}, {\"line\": 25, \"segments\": []}, {\"line\": 26, \"segments\": [{\"text\": \"  db:\"}]}, {\"line\": 27, \"segments\": [{\"text\": \"    image: postgres:9.5\"}]}, {\"line\": 28, \"segments\": [{\"text\": \"    environment:\"}]}, {\"line\": 29, \"segments\": [{\"text\": \"      POSTGRES_USER: prlinks\"}]}, {\"line\": 30, \"segments\": [{\"text\": \"      POSTGRES_PASSWORD: prlinks\"}]}, {\"line\": 31, \"segments\": [{\"text\": \"    volumes:\"}]}, {\"line\": 32, \"segments\": [{\"text\": \"    - './scripts/postgres:/\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-entrypoint-initdb.d'\"}]}]}], \"path_matches\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \"-compose.yml\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"docker-compose.yml\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/prlinks/src/843c28f4d09887db3f689ae1734d5bcb4339be87/docker-compose.yml\"}}}, \"content_match_count\": 2}, {\"content_matches\": [{\"lines\": [{\"line\": 1, \"segments\": [{\"text\": \"(import ./config.nix).\"}, {\"text\": \"docker\", \"match\": true}, {\"text\": \"-image\"}]}]}], \"path_matches\": [{\"text\": \"docker\", \"match\": true}, {\"text\": \".nix\"}], \"type\": \"code_search_result\", \"file\": {\"path\": \"docker.nix\", \"type\": \"commit_file\", \"links\": {\"self\": {\"href\": \"https://api.bitbucket.org/2.0/repositories/atlassianlabs/lambdabot-stride/src/1a4c77e3bf35992bf06863ff092265692c9cfb7a/docker.nix\"}}}, \"content_match_count\": 1}], \"query_substituted\": false, \"pagelen\": 10, \"page\": 1, \"size\": 123}"}}}